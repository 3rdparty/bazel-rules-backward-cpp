load("@rules_foreign_cc//foreign_cc:defs.bzl", "configure_make")

# `binutils` library needs this.
configure_make(
    name = "lzma",
    configure_in_place = True,
    env = select({
        # Without this option on macOS we will have the following issue:
        # .../libtool: no output file specified (specify with -o output).
        "@bazel_tools//src/conditions:darwin": {"AR": ""},
        "//conditions:default": {},
    }),
    lib_source = "@com_github_lzma//:all",
    out_static_libs = [
        "liblzma.a",
    ],
)

# Libunwind (https://github.com/libunwind/libunwind) unlike libunwind from
# libgcc provides, in some cases, a more accurate stacktrace as it knows
# to decode signal handler frames and lets us edit the context registers
# when unwinding, allowing stack traces over bad function references. On
# macOS clang provides a libunwind API compatible library as part of its
# environment, so no third party libraries are necessary.
# https://github.com/bombela/backward-cpp#libraries-to-unwind-the-stack
configure_make(
    name = "libunwind",
    configure_in_place = True,
    lib_source = "@com_github_libunwind//:all",
    out_static_libs = [
        "libunwind.a",
    ],
)

# We need 'binutils' in order to read the debug info if we want to get
# the ultimate stack trace.
configure_make(
    name = "binutils_bazelified",
    args = [
        # Without this make argument binutils will not compile.
        # https://www.linuxquestions.org/questions/linux-from-scratch-13/problem-compiling-binutils-575412/
        "MAKEINFO=true",
    ],
    configure_in_place = True,
    configure_options = [
        "--enable-install-libiberty",
    ],
    env = select({
        # Without this option on macOS we will have the following issue:
        # .../libtool: no output file specified (specify with -o output).
        "@bazel_tools//src/conditions:darwin": {"AR": ""},
        "//conditions:default": {},
    }),
    lib_source = "@com_github_binutils//:all",
    out_static_libs = [
        "libbfd.a",
        "libiberty.a",
    ],
)

cc_library(
    name = "backward-stacktrace",
    srcs = [
        "backward-stacktrace.cc",
    ],
    hdrs = [
        "backward-stacktrace.h",
    ],
    defines = [
        # For binutils
        "BACKWARD_HAS_BFD=1",
        # For libunwind
        "BACKWARD_HAS_LIBUNWIND=1",
    ],
    linkopts = [
        # For binutils
        "-lz",
    ],
    # For now we support this library for macOS and Linux. Maybe in
    # future we will add the support for Windows too.
    target_compatible_with = select({
        "@platforms//os:osx": [],
        "@platforms//os:linux": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    visibility = ["//visibility:public"],
    deps = select({
        "@bazel_tools//src/conditions:darwin": [
            ":binutils_bazelified",
            ":lzma",
            "@com_github_backward_cpp//:backward",
            "@com_github_google_googletest//:gtest",
        ],
        "//conditions:default": [
            ":binutils_bazelified",
            ":libunwind",
            ":lzma",
            "@com_github_backward_cpp//:backward",
            "@com_github_google_googletest//:gtest",
        ],
    }),
    # Link any binary that depends (directly or indirectly) on this C++ library
    # in all the object files for the files listed in srcs, even if some contain
    # no symbols referenced by the binary.
    alwayslink = True,
)
